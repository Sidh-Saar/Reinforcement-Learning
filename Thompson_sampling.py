# -*- coding: utf-8 -*-
"""Copy of thompson_sampling.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QO2kfIOqfnmnyt-NN3y2CrI5Tuv_oKDm

# Thompson Sampling

## Importing the libraries

Here, we import NumPy, Scikit-learn, and Matplotlib to make our code shorter and more efficient!
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""## Importing the dataset

This dataset provides various individuals, and their click rate on 10 different ads!
"""

dataset = pd.read_csv('Ads_CTR_Optimisation.csv')

"""## Implementing Thompson Sampling

Here, we implement the Thompson Sampling algorithm.

The "N" value indicates how many entries there are in the data set, and the "d" variable indicates how many different ads there are!

Although it is similar to the upper confidence bound algorithm, thompson sampling algorithms employ a probability-based approach by continuously updating a probability distribution for each ad based on the outcomes of the dataset.


"""

import random
N = 500
d = 10
ads_selected = []
numbers_of_rewards_1 = [0] * d
numbers_of_rewards_0 = [0] * d
total_reward = 0
for n in range(0, N):
  ad = 0
  max_random = 0
  for i in range(0, d):
    random_beta = random.betavariate(numbers_of_rewards_1[i] + 1, numbers_of_rewards_0[i] + 1)
    if (random_beta > max_random):
      max_random = random_beta
      ad = i
  ads_selected.append(ad)
  reward = dataset.values[n, ad]
  if reward == 1:
    numbers_of_rewards_1[ad] = numbers_of_rewards_1[ad] + 1
  else:
    numbers_of_rewards_0[ad] = numbers_of_rewards_0[ad] + 1
  total_reward = total_reward + reward

"""## Visualising the results - Histogram"""

plt.hist(ads_selected)
plt.title('Histogram of ads selections')
plt.xlabel('Ads')
plt.ylabel('Number of times each ad was selected')
plt.show()